<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ios on Taylor Halliday</title>
    <link>http://tayhalla.github.io/blog/tags/ios/</link>
    <description>Recent content in Ios on Taylor Halliday</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Mar 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://tayhalla.github.io/blog/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Managing ENVs In XCode With Schemes</title>
      <link>http://tayhalla.github.io/blog/post/envsInXCode/</link>
      <pubDate>Sun, 06 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tayhalla.github.io/blog/post/envsInXCode/</guid>
      <description>

&lt;p&gt;This post is a small one about work flow in XCode. There&amp;rsquo;s no explicit way to have XCode set ENVs for you. When I started working with the IDE, I would simply comment or uncomment certain sections of code based on the ENV I was trying to target.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;MyAppAPI&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;debug:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;baseURL:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;debug&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://debug.someAPI.com&amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://someAPI.com&amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As your application grows though, this kind of code can pop up in multiple classes. You could deal with it by making a central config class/stuct, but the idea of continually changing a single variable in the code that would drastically change behavior felt like an unsafe thing to do. Also, I would like to know the context of the code I&amp;rsquo;m looking at without having to navigate back and forth between a config file to see what environment I am operating under.&lt;/p&gt;

&lt;h1 id=&#34;xcode-schemes:06b4a5a12e9d1f0703fe2b52d22ccedd&#34;&gt;XCode Schemes&lt;/h1&gt;

&lt;p&gt;Xcode has a nice little drop down selector next to the device your targeting. It&amp;rsquo;s called the Scheme Selector:&lt;/p&gt;


&lt;figure class=&#34;blog-img&#34;&gt;
    
        &lt;img src=&#34;http://tayhalla.github.io/blog/blog/media/scheme_selector.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Per the &lt;a href=&#34;https://developer.apple.com/library/ios/featuredarticles/XcodeConcepts/Concept-Schemes.html&#34; title=&#34;Boring Apple Docs&#34;&gt;XCode Docs&lt;/a&gt;, here&amp;rsquo;s what they have to say about what a scheme selector is used for:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An Xcode scheme defines a collection of targets to build, a configuration to use when building, and a collection of tests to execute.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, sounds like this little drop down might have something to do with what we want. But, how do we configure the &lt;code&gt;Configuration&lt;/code&gt; to our liking?&lt;/p&gt;

&lt;h1 id=&#34;xcode-configurations:06b4a5a12e9d1f0703fe2b52d22ccedd&#34;&gt;XCode Configurations&lt;/h1&gt;

&lt;p&gt;Turns out they&amp;rsquo;re not using the term &amp;lsquo;Configuration&amp;rsquo; colloquially - XCode has something call &amp;lsquo;XCode Configurations&amp;rsquo;. You can mange them here:&lt;/p&gt;


&lt;figure class=&#34;blog-img&#34;&gt;
    
        &lt;img src=&#34;http://tayhalla.github.io/blog/blog/media/xcode_configs.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;While we&amp;rsquo;re here, let&amp;rsquo;s create a new configuration. We&amp;rsquo;ll call it &lt;code&gt;Production&lt;/code&gt; and it should be very similar to our current &lt;code&gt;Debug&lt;/code&gt; configuration. To do this, just find the &lt;code&gt;+&lt;/code&gt; button on the bottom left below the existing configurations, and click &lt;code&gt;Duplicate &amp;quot;Debug&amp;quot; Configuration&lt;/code&gt;. You should now have 3 configurations:&lt;/p&gt;


&lt;figure class=&#34;blog-img&#34;&gt;
    
        &lt;img src=&#34;http://tayhalla.github.io/blog/blog/media/three_configs.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;scheme-editor:06b4a5a12e9d1f0703fe2b52d22ccedd&#34;&gt;Scheme Editor&lt;/h1&gt;

&lt;p&gt;Configurations in XCode define the environment in which your code is running. The two there &lt;code&gt;Release&lt;/code&gt; and &lt;code&gt;Debug&lt;/code&gt; come for free out of the box, and are both used by your one existing scheme. To see how they are used by the default scheme, go to the scheme drop down, click it, then go to &lt;code&gt;Edit Scheme&lt;/code&gt;.&lt;/p&gt;


&lt;figure class=&#34;blog-img&#34;&gt;
    
        &lt;img src=&#34;http://tayhalla.github.io/blog/blog/media/edit_scheme.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;That will bring up the &lt;code&gt;Scheme Editor&lt;/code&gt; which then shows the settings for your current scheme. The thing we want to notice here is the subtext on the left, below the six titles (Build, Run, Text, etc.). Each of them specifies one of the configurations we saw earlier. The configuration is the context for the operation you&amp;rsquo;re performing with your project. So, if you hit &lt;code&gt;Run&lt;/code&gt; and you load your in the simulator or a device, our current scheme will use the &lt;code&gt;Debug&lt;/code&gt; configuration. But, if you wanted to archive your app for distribution, we can see that the &lt;code&gt;Archive&lt;/code&gt; action uses the &lt;code&gt;Release&lt;/code&gt; configuration.&lt;/p&gt;


&lt;figure class=&#34;blog-img&#34;&gt;
    
        &lt;img src=&#34;http://tayhalla.github.io/blog/blog/media/build_configs.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Next let&amp;rsquo;s make another scheme so that we can clearly tell when the project is using our development ENV vars vs production ENV vars. First, let&amp;rsquo;s hit &amp;lsquo;Duplicate Scheme&amp;rsquo; in the lower left, then that will create a copy of the previous configuration and it will ask us for a name. Let&amp;rsquo;s use this to make our development environment, so let&amp;rsquo;s call it &lt;code&gt;AwesomeProject Development&lt;/code&gt;. While we&amp;rsquo;re here, let&amp;rsquo;s change our archive command for this to use &lt;code&gt;Debug&lt;/code&gt; so that when we distribute a development build, it&amp;rsquo;s using our Development ENVs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not to jump ahead, but the caveat with using our &lt;code&gt;Debug&lt;/code&gt; configuration here is that there&amp;rsquo;s a bunch of non-optimized XCode build settings that will ship with these archives. If you want to ship builds that are using optimized configurations, you should create a fourth configuration - call it &lt;code&gt;Staging&lt;/code&gt; that is duplicated from the &lt;code&gt;Release&lt;/code&gt; configuration, and assign the &lt;code&gt;Archive&lt;/code&gt; action to that configuration here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, let&amp;rsquo;s go back to our other configuration and we&amp;rsquo;ll rename it to &lt;code&gt;AwesomeProject Production&lt;/code&gt; and leave it alone.&lt;/p&gt;


&lt;figure class=&#34;blog-img&#34;&gt;
    
        &lt;img src=&#34;http://tayhalla.github.io/blog/blog/media/Edit_scheme_name.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;preprocessor-macros-n-build-settings:06b4a5a12e9d1f0703fe2b52d22ccedd&#34;&gt;Preprocessor Macros n&amp;rsquo; Build Settings&lt;/h1&gt;

&lt;p&gt;Next, we&amp;rsquo;re going to assign a preprocessor macro to a a specific environment. If you&amp;rsquo;re not familiar with Preprocessor Macros, you can think of them as a sort of global flag your compiler can inject. Head over to your Build Settings in your project navigator, search for &lt;code&gt;Preprocessor Marcros&lt;/code&gt;, and open up the selection that is shown. If you expand the line item, you&amp;rsquo;ll see our configurations we saw earlier. Double click the green shaded box with the current &lt;code&gt;DEBUG&lt;/code&gt; flag in there, and add another entry.&lt;/p&gt;

&lt;h1 id=&#34;preprocessor-macros-n-code:06b4a5a12e9d1f0703fe2b52d22ccedd&#34;&gt;Preprocessor Macros n&amp;rsquo; Code&lt;/h1&gt;

&lt;p&gt;Now that we&amp;rsquo;re all setup, let&amp;rsquo;s go to some actual code and make this configuration mess actually do something for us. The preprocessor macros we set can be picked up in code by using some &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/cpp/Ifdef.html&#34; title=&#34;Boring gcc Docs&#34;&gt;slightly unfamiliar syntax&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;baseURL:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;baseURL:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;#if&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;DEVELOPMENT&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;baseURL&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://debug.someAPI.com&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;#else&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;baseURL&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://someAPI.com&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;#endif&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;baseURL&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, all we have to do is select the appropriate scheme, and it will select the appropriate ENV var we want. You can use this to set things like URLs, but you can also use it to set a range of other things such as UI Defaults, build optimizations, testing configurations, and more.&lt;/p&gt;


&lt;figure class=&#34;blog-img&#34;&gt;
    
        &lt;img src=&#34;http://tayhalla.github.io/blog/blog/media/two_configs.jpg&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>CADisplayLink and Maps</title>
      <link>http://tayhalla.github.io/blog/post/caDisplayLink/</link>
      <pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://tayhalla.github.io/blog/post/caDisplayLink/</guid>
      <description>

&lt;p&gt;Ever been in the position where you need to animate something on screen but the property is not covered by [UIView animateWith&amp;hellip;]? Or maybe the thing you&amp;rsquo;re trying to animate is not part of the standard UIKit frameworks, and is instead some higher level UI piece built by a vendor. I ran into this not too long ago with Google Maps iOS SDK. My desire was to animate a polyline across the sceen, but there was no built in animate feature for the SDK. This is how I learned about making your own animations with CADisplayLink. A bit of background first though&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;fun-with-google-maps:48e3a9cef42133d4e3a0accdf42773f4&#34;&gt;Fun With Google Maps&lt;/h1&gt;

&lt;p&gt;In the GoogleMaps iOS SDK, you create a polyline by creating a &lt;code&gt;GMSPath&lt;/code&gt; object with your desired coordinates, providing that to a &lt;code&gt;GMSPolyline&lt;/code&gt; and feeding the polyline some info such as width, color, etc., then pass that off to the &lt;code&gt;GMSMapView&lt;/code&gt; you&amp;rsquo;re using to display the map. Once you provide the path object to your mapview, the polyline is drawn on screen.&lt;/p&gt;

&lt;p&gt;Right off the bat, my though was that this polyline was simply another view, or most likely something backed by a &lt;code&gt;CAShapeLayer&lt;/code&gt;, but the path object and the map didn&amp;rsquo;t provide a reference to any underlying cocoa views or layers. I tried &amp;lsquo;fishing&amp;rsquo; for a reference to the view via &lt;code&gt;recursiveDescription&lt;/code&gt; and digging through subviews, but quickly realized that the polyline I was seeing was not a separate view, but something rendered directly onto a OpenGL view. GoogleMaps, Apple Maps, and most recently MapBox all provide thier map views as &lt;code&gt;GLViews&lt;/code&gt;. This pretty much killed the idea of finding a &lt;code&gt;UIView&lt;/code&gt; or &lt;code&gt;CALayer&lt;/code&gt; reference and animating it.&lt;/p&gt;

&lt;h1 id=&#34;gmspath:48e3a9cef42133d4e3a0accdf42773f4&#34;&gt;GMSPath&lt;/h1&gt;

&lt;p&gt;Once I gave up trying to animate the view&amp;rsquo;s appearance directly, I took a look back at the underling datasource and wondered what would happen if I changed the &lt;code&gt;GMSPath&lt;/code&gt; after I passed it to the mapview.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[self.mapView&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;setCamera:[GMSCameraPosition&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cameraWithLatitude:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;47.6094426&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;longitude:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;122.3319217&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;zoom:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;12.0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]];&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;GMSMutablePath&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mutablePath&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[[GMSMutablePath&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;alloc]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;init];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;[mutablePath&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addLatitude:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;47.626452&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;longitude:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;122.32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;[mutablePath&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addLatitude:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;47.626452&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;longitude:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;122.29&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;[mutablePath&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addLatitude:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;47.6&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;longitude:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;122.29&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;GMSPolyline&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;polyline&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[[GMSPolyline&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;alloc]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;init];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;[polyline&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;setPath:mutablePath];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;[polyline&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;setStrokeWidth:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;7.0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;[polyline&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;setStrokeColor:[UIColor&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;redColor]];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;[polyline&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;setMap:self.mapView];&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;dispatch_after(dispatch_time(DISPATCH_TIME_NOW,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int64_t&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NSEC_PER_SEC)),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dispatch_get_main_queue(),&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;[mutablePath&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addLatitude:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;47.6&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;longitude:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;122.32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;[mutablePath&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addLatitude:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;47.626452&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;longitude:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;122.32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;[polyline&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;setPath:mutablePath];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;



&lt;figure class=&#34;map-img&#34;&gt;
    
        &lt;img src=&#34;http://tayhalla.github.io/blog/blog/media/polyline_complete.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Boom!&lt;/p&gt;

&lt;h1 id=&#34;nstimer:48e3a9cef42133d4e3a0accdf42773f4&#34;&gt;NSTimer?&lt;/h1&gt;

&lt;p&gt;What I needed was a way to interpolate though my coordinates, and have the callback progressively update the polyline. My first thought was &lt;code&gt;NSTimer&lt;/code&gt; would be a good candidate, but I was wrong. NSTimer simply wasn&amp;rsquo;t performing its callbacks fast enough, no matter how small I made the intervals. Looking into the documentation reveals why:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A timer is not a real-time mechanism; it fires only when one of the run loop modes to which the timer has been added is running and able to check if the timer’s firing time has passed. Because of the various input sources a typical run loop manages, the effective resolution of the time interval for a timer is limited to on the order of 50-100 milliseconds.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I&amp;rsquo;m looking to do is smoothly animate something, so a mechanism that only fires 10-20 times a second is clearly not my solution. What I need is something that will refresh at least as fast as the window redraws.&lt;/p&gt;

&lt;h1 id=&#34;cadisplaylink:48e3a9cef42133d4e3a0accdf42773f4&#34;&gt;CADisplayLink&lt;/h1&gt;

&lt;p&gt;What is CADisplayLink? It&amp;rsquo;s a callback mechanism that hooks right into the screen&amp;rsquo;s refresh callbacks. From the docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A CADisplayLink object is a timer object that allows your application to synchronize its drawing to the refresh rate of the display. Your application creates a new display link, providing a target object and a selector to be called when the screen is updated&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds like just what we need. The API for &lt;code&gt;CADisplayLink&lt;/code&gt; is pretty similar to NSTimer. You alloc/init an instance, assign is to a runloop, give it a target and selector, and you have a callback that occurs whenever a redraw is about to happen on the screen.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;setupTimer&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.displayLink&lt;/span&gt;               &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[CADisplayLink&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;displayLinkWithTarget:self&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;selector:&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;@selector&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(updateRoutePolyline)];&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;[self.displayLink&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addToRunLoop:[NSRunLoop&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mainRunLoop]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forMode:NSRunLoopCommonModes];&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.displayLink.frameInterval&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2.0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.animationBeginTime&lt;/span&gt;        &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.animationCurrentFrameTime&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;updateRoutePolyline&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// Setting up our base times for the relative time tracking&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;duration&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(self.animationCurrentFrameTime&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.animationBeginTime&lt;/span&gt;        &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[self.displayLink&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;timestamp];&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.animationCurrentFrameTime&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[self.displayLink&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;timestamp];&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nowTime&lt;/span&gt;                 &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[self.displayLink&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;timestamp];&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.animationCurrentFrameTime&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nowTime;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;duration&lt;/span&gt;                       &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nowTime&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.animationBeginTime;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the result? A smooth animation across the screen for my polylines:&lt;/p&gt;


&lt;figure class=&#34;map-img&#34;&gt;
    
        &lt;img src=&#34;http://tayhalla.github.io/blog/blog/media/cadisplay_polyline.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;pop-and-other-animation-frameworks:48e3a9cef42133d4e3a0accdf42773f4&#34;&gt;POP and Other Animation Frameworks&lt;/h1&gt;

&lt;p&gt;CADisplayLink is actually the key to any animation framework. An animation on the screen is simply displaying the interpolation of values over the screen. The only thing that makes POP and other animations a bit more complicated is the concept of timing curves - the rate of the change in animateable values over the change in time. With the &lt;code&gt;[UIView animate...]&lt;/code&gt; functions, you may recognize them as the &lt;code&gt;UIViewAnimationCurve&lt;/code&gt; enum. They define whether the animation will proceed in a linear fashion, or if it will speed up and/or slow down at certain points in the process.&lt;/p&gt;

&lt;p&gt;For instance though, if you look at POP&amp;rsquo;s root animator class, you will find it &lt;a href=&#34;https://github.com/facebook/pop/blob/master/pop/POPAnimator.mm#L347&#34;&gt;hooking up a CADiaplyLink in the init&lt;/a&gt;, and it&amp;rsquo;s callback is the &lt;a href=&#34;https://github.com/facebook/pop/blob/master/pop/POPAnimator.mm#L425&#34;&gt;core render method in the animation&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;a-note-on-interpolation:48e3a9cef42133d4e3a0accdf42773f4&#34;&gt;A Note On Interpolation&lt;/h1&gt;

&lt;p&gt;In the previous section on animating a polyline, I oversimplified the process a bit. While you can simply interpolate between lat/lng pairs relative to the total distance in polyline, you need to be sure you&amp;rsquo;re hitting all of the original points provided to the polyline. This means that whenever you receive a callback to come up with a new point to put on screen, you need to check to make sure that all of the original control points (ends/beginnings of the lines) were laid out where they needed to be. In order to do that, we need to preprocess the line to figure out each control pairs&amp;rsquo; position in our longer collection of interpolated points. Here is the code to preprocess the interpolation:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// *** Create the polyline route ***&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;polylineCount&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)self.locations.count;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(polylineCount&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// Get total distance and record segments&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;CLLocationDistance&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;totalDistance&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0.0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;NSMutableArray&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;routeLegDistances&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[[NSMutableArray&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;alloc]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;init];&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// Calculate the total distance in order to get prorata distance legs&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;distances&lt;/span&gt;               &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;malloc(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(CLLocationDistance)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;polylineCount);&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// We use these to track the waypoint progress and indexes&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;allocCount&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;polylineCount&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2.0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;self.wayPointIndexTracker&lt;/span&gt;       &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;malloc(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;allocCount);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;allocCount;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.wayPointIndexTracker[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;INT16_MAX;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;self.wayPointIndexTrackerBegRef&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.wayPointIndexTracker;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;self.waypointMappingCount&lt;/span&gt;       &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// Getting the distances between waypoints so that we can&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// get relative length spans for each ray&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;CLLocation&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;previousLoc;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;polylineCount;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;CLLocation&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.locations[i];&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;previousLoc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;location;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;distances[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0.0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;[routeLegDistances&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addObject:[NSNumber&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;numberWithInt:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]];&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;distances[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[previousLoc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;distanceFromLocation:location];&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;totalDistance&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;distances[i];&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;previousLoc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;location;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// Create fake intermediate points&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;totalDesiredPoints&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// Adding a 100 mark buffer. Shouldn&amp;#39;t ever go over the limit anyways, but doesn&amp;#39;t take much room.&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;waypointRunner&lt;/span&gt;                          &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.wayPointIndexTracker;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;CLLocationCoordinate2D&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;finalCoordinateArray&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;malloc(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(CLLocationCoordinate2D)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(totalDesiredPoints&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;CLLocationCoordinate2D&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;coordinateRunner&lt;/span&gt;     &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;finalCoordinateArray;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;CLLocationCoordinate2D&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;previousCoordinate;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;coordinateCount&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;polylineCount;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// Add the first coord&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;CLLocation&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;loc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self.locations[x];&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;CLLocationCoordinate2D&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentCoord&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;loc.coordinate;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        
        &lt;span style=&#34;color: #75715e&#34;&gt;// We figure out the relative distance here between the current and the&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// previous. Then use that to approximate how many interpolated points&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// we need.&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;legDistance&lt;/span&gt;                  &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;distances[x];&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;relativeDistance&lt;/span&gt;             &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;legDistance&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;totalDistance;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;coordinateInsertCount&lt;/span&gt;           &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;relativeDistance&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;totalDesiredPoints;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;coordinateInsertCount;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;// Calculate the incremental coordinate diff and add to the current coord&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;newCoordinateVariance&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;coordinateInsertCount;&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addedLatVariance&lt;/span&gt;      &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(currentCoord.latitude&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;previousCoordinate.latitude)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;newCoordinateVariance;&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addedLngVariance&lt;/span&gt;      &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(currentCoord.longitude&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;previousCoordinate.longitude)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;newCoordinateVariance;&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;newLat&lt;/span&gt;                &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;previousCoordinate.latitude&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addedLatVariance;&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;newLng&lt;/span&gt;                &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;previousCoordinate.longitude&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;addedLngVariance;&lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;coordinateRunner&lt;/span&gt;            &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CLLocationCoordinate2DMake(newLat,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;newLng);&lt;/span&gt;

            &lt;span style=&#34;color: #75715e&#34;&gt;// If i == 0, we have a waypoint that we must hit&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;waypointRunner&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;coordinateCount;&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
            
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;coordinateRunner&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;coordinateCount&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;previousCoordinate&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;currentCoord;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;self.animationCoordinates&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;finalCoordinateArray;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;self.animationCoordinateCount&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;coordinateCount;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// Don&amp;#39;t need these anymore&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;free(distances);&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(self.animationCoordinateCount&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;[self&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;drawRoutPolyline];&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
    </item>
    
  </channel>
</rss>